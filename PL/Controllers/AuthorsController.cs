using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using BLL.Dtos;
using BLL.Interfaces;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using PL.Models;

namespace PL.Controllers
{
    [Route("api/authors")]
    [ApiController]
    public class AuthorsController : ControllerBase
    {
        private IMapper mapper;
        private IAuthorsService authorsService;
        public AuthorsController(IAuthorsService authorsService, IMapper mapper)
        {
            this.authorsService = authorsService;
            this.mapper = mapper;
        }


        /// <summary>
        /// Get list of all authors.
        /// </summary>
        /// <response code="200">**Success**. Return list of authors.</response>
        /// <response code="404">**Not Found**. No authors found in database.</response>
        /// <response code="500">**Server Error**. Internal server error.</response>
        /// <returns>Collection of authors.</returns>
        [HttpGet()]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public IActionResult GetAuthors()
        {
            try
            {
                var authors = authorsService.GetAllAuthors();
                
                if (authors == null || authors.Count() < 1)
                {
                    return NotFound();
                }
                else
                {
                    return Ok(mapper.Map<IEnumerable<AuthorPL>>(authors));
                }

            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Cannot get list of books.");
            }
        }

        
        /// <summary>
        /// Get specified Author by id.
        /// </summary>
        /// <param name="AuthorId">Unique identifier (GUID) of student should be in header.</param>
        /// <response code="200">**Success**. Return specified author.</response>
        /// <response code="404">**Not Found**. Specified author not found.</response>
        /// <response code="500">**Server Error**. Internal server error.</response>
        /// <returns>Author with specified Id.</returns>
        [HttpGet("{AuthorId}")]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public IActionResult GetAuthorById(Guid AuthorId)
        {
            try
            {
                var author = authorsService.GetAuthorById(AuthorId);

                if (author == null)
                {
                    return NotFound();
                }
                else
                {
                    return Ok(mapper.Map<AuthorPL>(author));
                }

            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Cannot get author with id:" + AuthorId.ToString() + " . Error Message: " + ex);
            }
        }

        
        /// <summary>
        /// Add an Author to database. 
        /// </summary>
        /// <param name="author"> Requesting JSON model fields:
        ///
        /// authorId     | Can be missed. New Id will be generated by server.
        /// fullName      | Required, max length 50 chars
        /// </param>
        /// <remarks>
        /// Sample request:
        /// 
        ///     POST api/authors
        ///     {
        ///       "fullName": "Sample Name"     
        ///     }
        /// </remarks>
        /// <response code="201">**Created**. Author with specified field was created.</response>
        /// <response code="400">**Bad Request**. Model is not valid or null.</response>  
        /// <response code="500">**Server Error**. Internal server error.</response>  
        /// <returns></returns>
        [HttpPost()]
        [ProducesResponseType(201)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public IActionResult AddAuthor([FromBody] AuthorPL author)
        {
            if (!ModelState.IsValid)
            {
                return StatusCode(400, "Model is not valid");
            }

            try
            {
                author.AuthorId = Guid.NewGuid();
                var newBook = mapper.Map<AuthorDto>(author);
                authorsService.AddAuthor(newBook);

                return StatusCode(201, "Author was added");
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Author is not added. Exception message: " + ex);
            }
        }


        /// <summary>
        /// Update specified Author's info in database.
        /// </summary>
        /// <param name="AuthorId">GUID. Must be specified to find Author by Id.</param>
        /// <param name="author">Requesting JSON model fields:
        /// 
        /// authorId      | required, GUID
        /// fullName      | required, max length 50 chars
        /// </param>
        /// <remarks>
        /// Sample request:
        /// 
        ///     PUT api/authors/3fa85f64-5717-4562-b3fc-2c963f66afa6
        ///     {
        ///       "authorId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
        ///       "fullName": "string"
        ///     }
        /// </remarks>
        /// <response code="204">**No Content**. Author was updated.</response>
        /// <response code="400">**Bad Request**. Model is not valid or null.</response>
        /// <response code="500">**Server Error**. Internal server error.</response>  
        /// <returns></returns>
        [HttpPut("{AuthorId}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public IActionResult UpdateBook(Guid AuthorId, [FromBody] AuthorPL author)
        {
            if (!ModelState.IsValid)
            {
                return StatusCode(400, "Model is not valid");
            }

            try
            {
                author.AuthorId = AuthorId;
                var newAuthor = mapper.Map<AuthorDto>(author);
                authorsService.UpdateAuthor(newAuthor);
                return StatusCode(204, "Author was updated");
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Author is not updated. Exception message: " + ex);
            }
        }


        /// <summary>
        /// Delete specified Author from database.
        /// </summary>
        /// <param name="AuthorId">GUID. Must be specified to find Author by Id.</param>
        /// <param name="author">Requesting JSON model fields:
        /// 
        /// authorId      | required, GUID
        /// fullName      | required, max length 50 chars
        /// </param>
        /// <remarks>
        /// Sample request:
        /// 
        ///     DELETE api/authors/3fa85f64-5717-4562-b3fc-2c963f66afa6
        ///     {
        ///       "authorId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
        ///       "fullName": "string"
        ///     }
        /// </remarks>
        /// <response code="204">**No Content**. Author was deleted.</response>
        /// <response code="400">**Bad Request**. Model is not valid or null.</response>
        /// <response code="500">**Server Error**. Internal server error.</response>  
        /// <returns></returns>
        [HttpDelete("{AuthorId}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public IActionResult DeleteBook(Guid AuthorId, [FromBody] AuthorPL author)
        {
            if (!ModelState.IsValid)
            {
                return StatusCode(400, "Model is not valid");
            }

            try
            {
                author.AuthorId = AuthorId;
                var newAuthor = mapper.Map<AuthorDto>(author);
                authorsService.DeleteAuthor(newAuthor);
                return StatusCode(204, "Author was deleted");
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Author is not deleted. Exception message: " + ex);
            }
        }


    }
}