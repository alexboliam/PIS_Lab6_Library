using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using BLL.Dtos;
using BLL.Interfaces;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using PL.Models;

namespace PL.Controllers
{
    [Route("api/librarycards")]
    [ApiController]
    public class LibraryCardsController : ControllerBase
    {
        private ILibraryCardsService libraryCardsService;
        private IMapper mapper;
        public LibraryCardsController(ILibraryCardsService libraryCardsService, IMapper mapper)
        {
            this.libraryCardsService = libraryCardsService;
            this.mapper = mapper;
        }

        #region Library Cards stuff
        /// <summary>
        /// Get list of all library cards. Recommended for library admin's panel.
        /// </summary>
        /// <response code="200">**Success**. Return list of library cards.</response>
        /// <response code="404">**Not Found**. No library cards found in database.</response>
        /// <response code="500">**Server Error**. Internal server error.</response>
        /// <returns></returns>
        [HttpGet()]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public IActionResult GetLibraryCards()
        {
            try
            {
                var libraryCards = libraryCardsService.GetAllLibraryCards();

                if (libraryCards == null || libraryCards.Count() < 1)
                {
                    return NotFound();
                }
                else
                {
                    return Ok(mapper.Map<IEnumerable<LibraryCardPL>>(libraryCards));
                }

            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Cannot get list of library cards. Error message: " + ex);
            }
        }


        /// <summary>
        /// Get specified library card.
        /// </summary>
        /// <param name="LibraryCardId">GUID of library card.</param>
        /// <response code="200">**Success**. Return specified library card.</response>
        /// <response code="404">**Not Found**. Specified library card not found.</response>
        /// <response code="500">**Server Error**. Internal server error.</response>
        /// <returns></returns>
        [HttpGet("{LibraryCardId}")]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public IActionResult GetLibraryCardById(Guid LibraryCardId)
        {
            try
            {
                var libraryCard = libraryCardsService.GetLibraryCardById(LibraryCardId);

                if (libraryCard == null)
                {
                    return NotFound();
                }
                else
                {
                    return Ok(mapper.Map<LibraryCardPL>(libraryCard));
                }

            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Cannot get library card with id:" + LibraryCardId.ToString() + " . Error Message: " + ex);
            }
        }


        /// <summary>
        /// Manually create a library card.
        /// </summary>
        /// <param name="libraryCard">Requesting JSON model fields:
        ///
        /// libraryCardId | Can be missed. New Id will be generated by server.
        /// studentId     | Required, GUID of owner student
        /// student       | Can be missed. Student will be loaded automatically.
        /// </param>
        /// <remarks>
        /// Sample request:
        /// 
        ///     POST api/librarycards
        ///     {        
        ///       "studentId": "3fa85f64-5717-4562-b3fc-2c963f66afa6"  
        ///     }
        /// </remarks>
        /// <response code="201">**Created**. Library card was created.</response>
        /// <response code="400">**Bad Request**. Model is not valid or null.</response>  
        /// <response code="500">**Server Error**. Internal server error.</response>  
        /// <returns></returns>
        [HttpPost()]
        [ProducesResponseType(201)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public IActionResult AddLibraryCard([FromBody] LibraryCardPL libraryCard)
        {
            if (!ModelState.IsValid)
            {
                return StatusCode(400, "Model is not valid");
            }

            try
            {
                libraryCard.LibraryCardId = Guid.NewGuid();
                var newCard = mapper.Map<LibraryCardDto>(libraryCard);
                libraryCardsService.AddLibraryCard(newCard);

                return StatusCode(201, "Library card was added");
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Library card is not added. Exception message: " + ex);
            }
        }


        /// <summary>
        /// Update a library card.
        /// </summary>
        /// <param name="LibraryCardId">GUID of library card.</param>
        /// <param name="libraryCard">Requesting JSON model fields:
        ///
        /// libraryCardId | Required.
        /// studentId     | Required, GUID of owner student
        /// student       | Can be missed. Student will be loaded automatically.
        /// </param>
        /// <remarks>
        /// Sample request:
        /// 
        ///     PUT api/librarycards/3fa85f64-5717-4562-b3fc-2c963f66afa6
        ///     {        
        ///       "libraryCardId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
        ///       "studentId": "3fa85f64-5717-4562-b3fc-2c963f66afa6"  
        ///     }
        /// </remarks>
        /// <response code="204">**No Content**. Library card was updated.</response>
        /// <response code="400">**Bad Request**. Model is not valid or null.</response>  
        /// <response code="500">**Server Error**. Internal server error.</response>  
        /// <returns></returns>
        [HttpPut("{LibraryCardId}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public IActionResult UpdateBook(Guid LibraryCardId, [FromBody] LibraryCardPL libraryCard)
        {
            if (!ModelState.IsValid)
            {
                return StatusCode(400, "Model is not valid");
            }

            try
            {
                libraryCard.LibraryCardId = LibraryCardId;
                var newLibraryCard = mapper.Map<LibraryCardDto>(libraryCard);
                libraryCardsService.UpdateLibraryCard(newLibraryCard);
                return StatusCode(204, "Library card was updated");
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Library card is not updated. Exception message: " + ex);
            }
        }


        /// <summary>
        /// Delete a library card.
        /// </summary>
        /// <param name="LibraryCardId">GUID of library card.</param>
        /// <param name="libraryCard">Requesting JSON model fields:
        ///
        /// libraryCardId | Required.
        /// studentId     | Required, GUID of owner student
        /// student       | Can be missed. Student will be loaded automatically.
        /// </param>
        /// <remarks>
        /// Sample request:
        /// 
        ///     DELETE api/librarycards/3fa85f64-5717-4562-b3fc-2c963f66afa6
        ///     {        
        ///       "libraryCardId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
        ///       "studentId": "3fa85f64-5717-4562-b3fc-2c963f66afa6"  
        ///     }
        /// </remarks>
        /// <response code="204">**No Content**. Library card was deleted.</response>
        /// <response code="400">**Bad Request**. Model is not valid or null.</response>  
        /// <response code="500">**Server Error**. Internal server error.</response>  
        /// <returns></returns>
        [HttpDelete("{LibraryCardId}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public IActionResult DeleteBook(Guid LibraryCardId, [FromBody] LibraryCardPL libraryCard)
        {
            if (!ModelState.IsValid)
            {
                return StatusCode(400, "Model is not valid");
            }

            try
            {
                libraryCard.LibraryCardId = LibraryCardId;
                var newLibraryCard = mapper.Map<LibraryCardDto>(libraryCard);
                libraryCardsService.DeleteLibraryCard(newLibraryCard);
                return StatusCode(204, "Library card was deleted");
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Library card is not deleted. Exception message: " + ex);
            }
        }
        #endregion

        #region Library Card Fields stuff

        /// <summary>
        /// Get fields for specified library card.
        /// </summary>
        /// <param name="LibraryCardId">GUID of library card.</param>
        /// <response code="200">**Success**. Return specified library card fields.</response>
        /// <response code="404">**Not Found**. Specified library card fields not found.</response>
        /// <response code="500">**Server Error**. Internal server error.</response>
        /// <returns></returns>
        [HttpGet("{LibraryCardId}/fields")]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public IActionResult GetFields(Guid LibraryCardId)
        {
            try
            {
                var fields = libraryCardsService.GetFields(LibraryCardId);

                if (fields == null || fields.Count() < 1)
                {
                    return StatusCode(404, "No fields found for this library card");
                }
                else
                {
                    return Ok(mapper.Map<IEnumerable<LibraryCardFieldPL>>(fields));
                }

            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Cannot get list of fields. Error message: " + ex);
            }
        }


        /// <summary>
        /// Get specified library card field by Id.
        /// </summary>
        /// <param name="FieldId">GUID of field.</param>
        /// /// <response code="200">**Success**. Return specified library card field.</response>
        /// <response code="404">**Not Found**. Specified library card field not found.</response>
        /// <response code="500">**Server Error**. Internal server error.</response>
        /// <returns></returns>
        [HttpGet("fields/{FieldId}")]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public IActionResult GetFieldsById(Guid FieldId)
        {
            try
            {
                var field = libraryCardsService.GetFieldById(FieldId);

                if (field == null)
                {
                    return StatusCode(204, "Cannot find library card field with id[" + FieldId + "]");
                }
                else
                {
                    return Ok(mapper.Map<LibraryCardFieldPL>(field));
                }

            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Cannot get list of fields. Error message: " + ex);
            }
        }


        /// <summary>
        /// Add field to specified library card.
        /// </summary>
        /// <param name="LibraryCardId">GUID of library card.</param>
        /// <param name="field">Requesting JSON model fields:
        ///
        /// id            | Can be missed. New Id will be generated by server.
        /// issueDate     | Required, date
        /// returnDate    | Should be missed or null.
        /// book          | Must contain bookId, other can be missed.
        /// libraryCard   | Must contain libraryCardId, other can be missed.
        /// </param>
        /// <remarks>
        /// Sample request:
        /// 
        ///     POST api/librarycards/3fa85f64-5717-4562-b3fc-2c963f66afa6/fields
        ///     {        
        ///       "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
        ///       "issueDate": "10-10-2010",
        ///       "book": {
        ///             "bookId": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        ///       },
        ///       "libraryCard": {
        ///             "libraryCardId": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        ///       }
        ///     }
        /// </remarks>
        /// <response code="201">**Created**. Library card field was created.</response>
        /// <response code="400">**Bad Request**. Model is not valid or null.</response>  
        /// <response code="500">**Server Error**. Internal server error.</response>  
        /// <returns></returns>
        [HttpPost("{LibraryCardId}/fields")]
        [ProducesResponseType(201)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public IActionResult AddField(Guid LibraryCardId, [FromBody] LibraryCardFieldPL field)
        {
            if (!ModelState.IsValid)
            {
                return StatusCode(400, "Model is not valid");
            }

            try
            {
                field.Id = Guid.NewGuid();
                field.LibraryCard.LibraryCardId = LibraryCardId;
                var newField = mapper.Map<LibraryCardFieldDto>(field);
                libraryCardsService.AddField(newField);

                return StatusCode(201, "Library card field was added");
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Library card field is not added. Exception message: " + ex);
            }
        }


        /// <summary>
        /// Update specified library card field.
        /// </summary>
        /// <param name="FieldId"></param>
        /// <param name="field">Requesting JSON model fields:
        ///
        /// id            | Required.
        /// issueDate     | Required, date
        /// returnDate    | Required, date
        /// book          | Must contain bookId, other can be missed.
        /// libraryCard   | Must contain libraryCardId, other can be missed.
        /// </param>
        /// <remarks>
        /// Sample request:
        /// 
        ///     PUT api/librarycards/fields/3fa85f64-5717-4562-b3fc-2c963f66afa6
        ///     {        
        ///       "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
        ///       "issueDate": "10-10-2010",
        ///       "returnDate": "10-10-2010",
        ///       "book": {
        ///             "bookId": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        ///       },
        ///       "libraryCard": {
        ///             "libraryCardId": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        ///       }
        ///     }
        /// </remarks>
        /// <response code="204">**No Content**. Library card field was updated.</response>
        /// <response code="400">**Bad Request**. Model is not valid or null.</response>  
        /// <response code="500">**Server Error**. Internal server error.</response>  
        /// <returns></returns>
        [HttpPut("fields/{FieldId}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public IActionResult UpdateField(Guid FieldId, [FromBody] LibraryCardFieldPL field)
        {
            if (!ModelState.IsValid)
            {
                return StatusCode(400, "Model is not valid");
            }

            try
            {
                field.Id = FieldId;

                var newField = mapper.Map<LibraryCardFieldDto>(field);

                libraryCardsService.UpdateField(newField);

                return StatusCode(204, "Library card field was updated");
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Library card field is not updated. Exception message: " + ex);
            }
        }

        /// <summary>
        /// Delete specified library card field.
        /// </summary>
        /// <param name="FieldId"></param>
        /// <param name="field">Requesting JSON model fields:
        ///
        /// id            | Required.
        /// issueDate     | Required, date
        /// returnDate    | Required, date
        /// book          | Must contain bookId, other can be missed.
        /// libraryCard   | Must contain libraryCardId, other can be missed.
        /// </param>
        /// <remarks>
        /// Sample request:
        /// 
        ///     PUT api/librarycards/fields/3fa85f64-5717-4562-b3fc-2c963f66afa6
        ///     {        
        ///       "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
        ///       "issueDate": "10-10-2010",
        ///       "returnDate": "10-10-2010",
        ///       "book": {
        ///             "bookId": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        ///       },
        ///       "libraryCard": {
        ///             "libraryCardId": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        ///       }
        ///     }
        /// </remarks>
        /// <response code="204">**No Content**. Library card field was deleted.</response>
        /// <response code="400">**Bad Request**. Model is not valid or null.</response>  
        /// <response code="500">**Server Error**. Internal server error.</response>  
        /// <returns></returns>
        [HttpDelete("fields/{FieldId}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public IActionResult DeleteField(Guid FieldId, [FromBody] LibraryCardFieldPL field)
        {
            if (!ModelState.IsValid)
            {
                return StatusCode(400, "Model is not valid");
            }

            try
            {
                field.Id = FieldId;

                var newField = mapper.Map<LibraryCardDto>(field);

                libraryCardsService.DeleteLibraryCard(newField);
                return StatusCode(204, "Library card field was deleted");
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Library card field is not deleted. Exception message: " + ex);
            }
        }

        #endregion
    }
}