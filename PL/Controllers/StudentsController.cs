using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using BLL.Dtos;
using BLL.Interfaces;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using PL.Models;
using Swashbuckle.AspNetCore;

namespace PL.Controllers
{
    [Route("api/students")]
    [ApiController]
    public class StudentsController : ControllerBase
    {
        private IStudentsService studentsService;
        private ILibraryCardsService libraryCardsService;
        private IMapper mapper;

        public StudentsController(IStudentsService studentsService, ILibraryCardsService libraryCardsService, IMapper mapper)
        {
            this.studentsService = studentsService;
            this.libraryCardsService = libraryCardsService;
            this.mapper = mapper;
        }


        /// <summary>
        /// Get list of all registered students. Recommended to use only for library admin page.
        /// </summary>
        /// <response code="200">**Success**. Return list of students.</response>
        /// <response code="500">**Server Error**. Internal server error.</response>
        /// <returns>Collection of students.</returns>
        /// 
        [HttpGet]
        [ProducesResponseType(200)]
        [ProducesResponseType(500)]
        public IActionResult GetAllStudents()
        {
            try
            {
                var students = studentsService.GetAllStudents();
                return Ok( mapper.Map<IEnumerable<StudentPL>>(students) );
            }
            catch(Exception ex)
            {
                return StatusCode(500, "Internal server error. Cannot get list of students.");
            }
        }


        /// <summary>
        /// Get specified student by id.
        /// </summary>
        /// <param name="id">Unique identifier (GUID) of student should be in header.</param>
        /// <response code="200">**Success**. Return specified student.</response>
        /// <response code="500">**Server Error**. Internal server error.</response>
        /// <returns>Student with specified Id.</returns>
        [HttpGet("{id}")]
        [ProducesResponseType(200)]
        [ProducesResponseType(500)]
        public IActionResult GetStudentById(Guid id)
        {
            try
            {
                var student = studentsService.GetStudentById(id);
                return Ok(mapper.Map<StudentPL>(student));
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Cannot get list of students.");
            }
        }


        /// <summary>
        /// Add a student to database manually. 
        /// </summary>
        /// <param name="student"> Requesting JSON model fields:
        ///
        /// studentId     | Can be missed. New Id will be generated by server.
        /// login         | Required, max length 50 chars
        /// fullName      | Required, max length 50 chars
        /// libraryCard   | Can be missed. New library card will be generated by server.
        /// </param>
        /// <remarks>
        /// Sample request:
        /// 
        ///     POST api/students
        ///     {        
        ///       "login": "sample-login",
        ///       "fullName": "Sample Login"     
        ///     }
        /// </remarks>
        /// <response code="200">**Success**. Returns the newly created student's Id.</response>
        /// <response code="400">**Bad Request**. Model is not valid or null.</response>  
        /// <response code="409">**Conflict**. Student with such login already exists.</response>  
        /// <response code="500">**Server Error**. Internal server error.</response>  
        /// <returns></returns>
        [HttpPost()]
        [ProducesResponseType(200)]
        [ProducesResponseType(400)]
        [ProducesResponseType(409)]
        [ProducesResponseType(500)]
        public IActionResult AddStudent([FromBody]StudentPL student)
        {
            if (!ModelState.IsValid)
            {
                return StatusCode(400, "Model is not valid");
            }

            try
            {
                student.StudentId = Guid.NewGuid();
                var newStudent = mapper.Map<StudentDto>(student);
                var id = studentsService.AddStudent(newStudent);
                if(id != null)
                {
                    return Ok((Guid)id);
                }
                else
                {
                    return StatusCode(409, "Student with this login already exists");
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Student is not created. Exception message: " + ex);
            }
        }


        /// <summary>
        /// Update student's info in database.
        /// </summary>
        /// <param name="StudentId">GUID. Must be specified to find student by Id.</param>
        /// <param name="student">Requesting JSON model fields:
        /// 
        /// studentId     | required, GUID
        /// login         | required, max length 50 chars
        /// fullName      | required, max length 50 chars
        /// libraryCard   | can be missed
        /// </param>
        /// <remarks>
        /// Sample request:
        /// 
        ///     PUT api/students/{StudentId}
        ///     {
        ///       "studentId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
        ///       "login": "string",
        ///       "fullName": "string"
        ///     }
        /// </remarks>
        /// <response code="204">**No Content**. Student was updated.</response>
        /// <response code="400">**Bad Request**. Model is not valid or null.</response>
        /// <response code="500">**Server Error**. Internal server error.</response>  
        /// <returns></returns>
        [HttpPut("{StudentId}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public IActionResult UpdateStudent(Guid StudentId, [FromBody]StudentPL student)
        {
            if (!ModelState.IsValid)
            {
                return StatusCode(400, "Model is not valid");
            }

            try
            {
                student.StudentId = StudentId;
                var newStudent = mapper.Map<StudentDto>(student);
                studentsService.UpdateStudent(newStudent);

                return StatusCode(204, "Student was updated.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Student is not updated. Maybe student is not found. Exception message: " + ex);
            }
        }


        /// <summary>
        /// Delete specified student from database.
        /// </summary>
        /// <param name="StudentId">GUID. Must be specified to find student by Id.</param>
        /// <param name="student">Requesting JSON model fields:
        /// 
        /// studentId     | Required, GUID
        /// login         | Required, max length 50 chars
        /// fullName      | Required, max length 50 chars
        /// libraryCard   | Can be missed.
        /// </param>
        /// <remarks>
        /// Sample request:
        /// 
        ///     DELETE api/students/{StudentId}
        ///     {
        ///       "studentId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
        ///       "login": "string",
        ///       "fullName": "string"
        ///     }
        /// </remarks>
        /// <response code="204">**No Content**. Student was updated.</response>
        /// <response code="400">**Bad Request**. Model is not valid or null.</response>
        /// <response code="500">**Server Error**. Internal server error.</response>  
        /// <returns></returns>
        [HttpDelete("{StudentId}")]
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public IActionResult DeleteStudent(Guid StudentId, [FromBody]StudentPL student)
        {
            if (!ModelState.IsValid)
            {
                return StatusCode(400, "Model is not valid");
            }

            try
            {
                student.StudentId = StudentId;
                var newStudent = mapper.Map<StudentDto>(student);
                studentsService.DeleteStudent(newStudent);

                return StatusCode(204, "Student was deleted.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Student is not deleted. Maybe student is not found. Exception message: " + ex);
            }
        }
    }
}