using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using BLL.Dtos;
using BLL.Interfaces;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using PL.Models;

namespace PL.Controllers
{
    [Route("api/books")]
    [ApiController]
    public class BooksController : ControllerBase
    {
        ILibraryCardsService libraryCardsService;
        private IBooksService booksService;
        private IMapper mapper;
        public BooksController(IBooksService booksService, ILibraryCardsService libraryCardsService, IMapper mapper)
        {
            this.booksService = booksService;
            this.libraryCardsService = libraryCardsService;
            this.mapper = mapper;
        }


        /// <summary>
        /// Get list of all books in database. Can be filtered with optional parameters.
        /// </summary>
        /// <param name="author">[Optional] Full name of author. </param>
        /// <param name="category">[Optional] Name of category.</param>
        /// <param name="name">[Optional] Name of book.</param>
        /// <remarks>
        /// Sample requests:
        /// 
        ///     GET api/books/?name=Metro 2034&amp;category=post-apocalyptic&amp;author=Dmitry
        ///     
        ///     GET api/books/?name=harry potter&amp;author=Rowling
        /// </remarks>
        /// <response code="200">**Success**. Return list of books.</response>
        /// <response code="404">**Not Found**. No books with specified filters found in database.</response>
        /// <response code="500">**Server Error**. Internal server error.</response>
        /// <returns></returns>
        [HttpGet()]
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public IActionResult GetBooks([FromQuery(Name = "author")] string author, [FromQuery(Name = "category")] string category, [FromQuery(Name = "name")] string name)
        {
            try
            {
                var books = booksService.GetAllBooks();

                if (!string.IsNullOrEmpty(author))
                {
                    books = books.Intersect(books.Where(x => x.Author.FullName.Contains(author))).ToList();
                }
                if (!string.IsNullOrEmpty(category))
                {
                    books = books.Intersect(books.Where(x => x.Category.CategoryName.Contains(category))).ToList();
                }
                if (!string.IsNullOrEmpty(name))
                {
                    books = books.Intersect(books.Where(x=>x.Name.Contains(name))).ToList();
                }


                if (books == null || books.Count() < 1)
                {
                    return NotFound();
                }
                else
                {
                    return Ok(mapper.Map<IEnumerable<BookPL>>(books));
                }

            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Cannot get list of books. Error message: " + ex);
            }
        }


        /// <summary>
        /// Get book by it's Id.
        /// </summary>
        /// <param name="BookId">Unique identifier (GUID) of book should be in header.</param>
        /// <response code="200">**Success**. Return specified book.</response>
        /// <response code="404">**Not Found**. Specified book not found.</response>
        /// <response code="500">**Server Error**. Internal server error.</response>
        /// <returns>Book with specified Id.</returns>
        [ProducesResponseType(200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        [HttpGet("{BookId}")]
        public IActionResult GetBookById(Guid BookId)
        {
            try
            {
                var book = booksService.GetBookById(BookId);

                if (book == null)
                {
                    return NotFound();
                }
                else
                {
                    return Ok(mapper.Map<BookPL>(book));
                }

            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Cannot get book with id:" + BookId.ToString() + " . Error Message: " + ex);
            }
        }


        /// <summary>
        /// Add specified book to database.
        /// </summary>
        /// <param name="book">Requesting JSON model fields:
        /// 
        /// bookId        | Can be missed. New Id will be generated by server.
        /// isAvailable   | Required, bool
        /// category      | Required categoryName field. Other can be missed.
        /// author        | Required fullName. Other can be missed.
        /// name          | Required, max length 150 chars
        /// description   | Required, max length 2500 chars
        /// </param>
        /// <remarks>
        /// Sample request:
        /// 
        ///     POST api/books
        ///     {
        ///       "isAvailable": true,
        ///       "category": {
        ///             "categoryName": "string"
        ///       },
        ///       "author": {
        ///             "fullName": "string"
        ///       },
        ///       "name": "string",
        ///       "description": "string"
        ///     }
        /// </remarks>
        /// <response code="201">**Created**. Book was added.</response>
        /// <response code="400">**Bad Request**. Model is not valid or null.</response>
        /// <response code="500">**Server Error**. Internal server error.</response>  
        /// <returns></returns>
        [ProducesResponseType(201)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        [HttpPost()]
        public IActionResult AddBook([FromBody] BookPL book)
        {
            if (!ModelState.IsValid)
            {
                return StatusCode(400, "Model is not valid");
            }

            try
            {
                book.BookId = Guid.NewGuid();
                var newBook = mapper.Map<BookDto>(book);
                booksService.AddBook(newBook);

                return StatusCode(201, "Book was added");
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Book is not added. Exception message: " + ex);
            }
        }


        /// <summary>
        /// Update specified book.
        /// </summary>
        /// <param name="BookId">GUID. Must be specified to find a book.</param>
        /// <param name="book">Requesting JSON model fields:
        /// 
        /// bookId        | Required, GUID
        /// isAvailable   | Required, bool
        /// category      | Required categoryName field. Other can be missed.
        /// author        | Required fullName. Other can be missed.
        /// name          | Required, max length 150 chars
        /// description   | Required, max length 2500 chars
        /// </param>
        /// <remarks>
        /// Sample request:
        /// 
        ///     PUT api/books/"3fa85f64-5717-4562-b3fc-2c963f66afa6"
        ///     {
        ///       "bookId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
        ///       "isAvailable": true,
        ///       "category": {
        ///             "categoryName": "string"
        ///       },
        ///       "author": {
        ///             "fullName": "string"
        ///       },
        ///       "login": "string",
        ///       "description": "string"
        ///     }
        /// </remarks>
        /// <response code="204">**No Content**. Book was updated.</response>
        /// <response code="400">**Bad Request**. Model is not valid or null.</response>
        /// <response code="500">**Server Error**. Internal server error.</response>  
        /// <returns></returns>
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        [HttpPut("{BookId}")]
        public IActionResult UpdateBook(Guid BookId,[FromBody] BookPL book)
        {
            if (!ModelState.IsValid)
            {
                return StatusCode(400, "Model is not valid");
            }

            try
            {
                book.BookId = BookId;
                var newBook = mapper.Map<BookDto>(book);
                booksService.UpdateBook(newBook);
                return StatusCode(204, "Book was updated");
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Book is not updated. Exception message: " + ex);
            }
        }


        /// <summary>
        /// Remove specified book from database.
        /// </summary>
        /// <param name="BookId">GUID. Must be specified to find a book.</param>
        /// <param name="book">Requesting JSON model fields:
        /// 
        /// bookId        | Required, GUID
        /// isAvailable   | Required, bool
        /// category      | Required categoryName field. Other can be missed.
        /// author        | Required fullName. Other can be missed.
        /// name          | Required, max length 150 chars
        /// description   | Required, max length 2500 chars
        /// </param>
        /// <remarks>
        /// Sample request:
        /// 
        ///     DELETE api/books/{BookId}
        ///     {
        ///       "bookId: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
        ///       "isAvailable": true,
        ///       "category": {
        ///             "categoryName": "string"
        ///       },
        ///       "author": {
        ///             "fullName": "string"
        ///       },
        ///       "login": "string",
        ///       "description": "string"
        ///     }
        /// </remarks>
        /// <response code="204">**No Content**. Book was deleted.</response>
        /// <response code="400">**Bad Request**. Model is not valid or null.</response>
        /// <response code="500">**Server Error**. Internal server error.</response>  
        /// <returns></returns>
        [ProducesResponseType(204)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        [HttpDelete("{BookId}")]
        public IActionResult DeleteBook(Guid BookId, [FromBody] BookPL book)
        {
            if (!ModelState.IsValid)
            {
                return StatusCode(400, "Model is not valid");
            }

            try
            {
                book.BookId = BookId;
                var newBook = mapper.Map<BookDto>(book);
                booksService.DeleteBook(newBook);
                return StatusCode(204, "Book was deleted");
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Book is not deleted. Exception message: " + ex);
            }
        }


        /// <summary>
        /// Take a book from library. Book becomes unavailable. Student's library card updates.
        /// </summary>
        /// <param name="bookId">Specifies Id of book taking.</param>
        /// <param name="studentId">Specifies student that takes book.</param>
        /// <param name="returnDate">Specifies date of taking</param>
        /// <remarks>
        /// Sample request:
        /// 
        ///     PUT api/books/take/?bookId=3fa85f64-5717-4562-b3fc-2c963f66afa6&amp;studentId=3fa85f64-5717-4562-b3fc-2c963f66afa6&amp;issueDate=10-10-2019
        /// </remarks>
        /// <response code="204">**No Content**. Book was taken.</response>
        /// <response code="500">**Server Error**. Internal server error. Book was not taken.</response>  
        /// <returns></returns>
        [ProducesResponseType(204)]
        [ProducesResponseType(500)]
        [HttpPut("take")]
        public IActionResult TakeBook([FromQuery]Guid bookId, [FromQuery]Guid studentId, DateTime issueDate)
        {
            try
            {
                var taken = libraryCardsService.TakeBook(bookId, studentId, issueDate);

                if(taken)
                {
                    return StatusCode(204, "Book was taken.");
                }
                else
                {
                    return StatusCode(500, "Book was not taken.");
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Book is not taken. Exception message: " + ex);
            }
        }


        /// <summary>
        /// Return book to library. Book becomes available. Student's library card updates.
        /// </summary>
        /// <param name="bookId">Specifies Id of book returning.</param>
        /// <param name="studentId">Specifies student that returns book.</param>
        /// <param name="returnDate">Specifies date of returning</param>
        /// <remarks>
        /// Sample request:
        /// 
        ///     PUT api/books/return/?bookId=3fa85f64-5717-4562-b3fc-2c963f66afa6&amp;studentId=3fa85f64-5717-4562-b3fc-2c963f66afa6&amp;returnDate=10-12-2019
        /// </remarks>
        /// <response code="204">**No Content**. Book was returned.</response>
        /// <response code="500">**Server Error**. Internal server error. Book was not returned.</response>  
        /// <returns></returns>
        [ProducesResponseType(204)]
        [ProducesResponseType(500)]
        [HttpPut("return")]
        public IActionResult ReturnBook([FromQuery]Guid bookId, [FromQuery]Guid studentId, DateTime returnDate)
        {
            try
            {
                var taken = libraryCardsService.ReturnBook(bookId, studentId, returnDate);

                if (taken)
                {
                    return StatusCode(204, "Book was returned.");
                }
                else
                {
                    return StatusCode(500, "Book was not returned.");
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error. Book is not returned. Exception message: " + ex);
            }
        }
    }
}